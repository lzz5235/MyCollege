/* 
 * File:   server.cpp
 * Author: lzz
 *
 * Created on 2013年4月1日, 下午12:52
 */

#include"server.h"
#include"def.h"
#include"protocol.h"



int OperateFromClient(int sockfd)
{
    int             n;
    Msg    *serverinfo;
    int             fd;
    char           fileName[FILENAME]="";
    serverinfo = (Msg *)malloc(sizeof(Msg)); 
    memset(serverinfo, 0, sizeof(Msg));

    while( (n = read(sockfd, serverinfo, sizeof(Msg))) > 0)
    {
        if(n != serverinfo->headLength)
        {
            printf("read length is not head length\n");
            continue;
        }   
        bzero(fileName,sizeof(fileName));
        strcpy(fileName,serverinfo->FileName);
        printf("fileName is %s \n",fileName);
        if(access(fileName, F_OK) == -1)//不存在这个文件
        {
            fd = open(fileName, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
        
            if(fd == -1)
            {
                 printf("open file failed\n");
                continue;
            }
        }
        else
        {
            fd = open(fileName, O_RDWR);
        } 
        lseek(fd, 0, SEEK_END);

        switch(serverinfo->cmd)
        {
            case 'r':
                
                printf("the read start is %d, the length is %d\n", serverinfo->offset, serverinfo->reqLength);
                lseek(fd, serverinfo->offset, SEEK_SET);
                if(read(fd, buf, serverinfo->reqLength) != serverinfo->reqLength)
               	{
                    printf("readlength is not the  request length \n");
                    break;
                }
                printf("readfile end \n");
                serverinfo->isComplete = 'y';
                if(write(sockfd, serverinfo, serverinfo->headLength) != serverinfo->headLength)
                {
                    printf("send read context head to client erro,length is not the headLength \n");
                    break;
                }
                printf("the responce of head end\n");
                if(write(sockfd, buf, serverinfo->reqLength) != serverinfo->reqLength)
                {
                    printf("send read context to client ERRO, length is not the reqLength\n");
                    break;
                }
                printf("the responce of read context end \n");
                break;
            case 'w':

                printf("this is in write server ,the start is %d,and the length is %d \n",serverinfo->offset,serverinfo->reqLength);
                
                if(serverinfo->reqLength==0)     
                    return -2;
                write(fd, serverinfo->Data,serverinfo->reqLength);
                bzero(serverinfo,sizeof(Msg));               

                break;
        }
        close(fd);
        memset(serverinfo, 0, sizeof(Msg));            
    } 
    return 0;
}
int CheckUser(int clientfd)
{
	int ret;
	char buf[MAXSIZE]="";
	char str[MAXSIZE]="";
	read(clientfd,buf,sizeof(buf));
	printf("from client:%s\n",buf);
	while(1)
	{
		bzero(buf,sizeof(buf));
		read(clientfd,buf,sizeof(buf));//读取从客户端输入的帐号
		printf("account number:%s\n",buf);	
		if(strcmp(buf,"")!=0)
		{	
			if(strcmp(buf,"lzz")==0)//匹配帐号
			{
				bzero(str,sizeof(str));
				strcpy(str,"yes");//帐号匹配成功把yes存入字符数组中
				write(clientfd,str,strlen(str));//匹配成功把yes传给客户端
				bzero(str,sizeof(str));
				break;
			}
			else 
			{	
				bzero(str,sizeof(str));
				strcpy(str,"no");//匹配失败把no存入字符数组中
				write(clientfd,str,strlen(str));//匹配失败把no传给客户端
				bzero(str,sizeof(str));
			}
		}
	}
	while(1)
	{
		bzero(buf,sizeof(buf));
		read(clientfd,buf,sizeof(buf));//读取从客户端输入的密码
		printf("password:%s\n",buf);
		if(strcmp(buf,"")!=0)
		{
			if(strcmp(buf,"123456")==0)//匹配密码
			{
				bzero(str,sizeof(str));
				strcpy(str,"yes");//密码匹配成功把yes存入字符数组中
				write(clientfd,str,strlen(str));//匹配成功把yse传给客户端
				bzero(str,sizeof(str));
				break;
			}
			else 
			{
				bzero(str,sizeof(str));
				strcpy(str,"no");//密码匹配失败把no存入字符数组中
				write(clientfd,str,strlen(str));//密码匹配失败把no传给客户端
				bzero(str,sizeof(str));
			}
		}
			
	}
}

